#!/usr/bin/env python3
# beam: Scripts for Me
# Copyright 2017 Matt LaChance
#
# This file is part of beam.
#
# beam is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# beam is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with beam. If not, see <http://www.gnu.org/licenses/>.
from argparse import ArgumentParser
from beam.emoji_lib import sub_emoji_term_io
from beam.emoji_lib.git import get_rst_table, get_commit_table
from subprocess import Popen, PIPE
from sys import argv, stdin

def sub_emoji_in_each_line (stream):
    for line in stream:
        print(sub_emoji_term_io(line))

def filter_emoji (args, log_args):
    if args.input_file == "":
        stream = Popen(["git", "log", "--color=always"] + log_args,
                       stdout=PIPE,
                       universal_newlines=True).stdout
        sub_emoji_in_each_line(stream)

    elif args.input_file == "-":
        sub_emoji_in_each_line(stdin)

    else:
        with open(args.input_file, "r") as stream:
            sub_emoji_in_each_line(stream)

def separate_arg_sets (sys_argv):
    args = list(argv[1:])
    try:
        i = args.index("--")

    except ValueError:
        return args, [ ]

    else:
        return args[:i], args[i+1:]

args, log_args = separate_arg_sets(argv)

parser = ArgumentParser()

parser.add_argument("input_file",
                    nargs="?",
                    default="",
                    help="defaults to stdout of git log")

parser.add_argument("--show-rst-table",
                    dest="rst_table",
                    action="store_const",
                    const="rst",
                    default="",
                    help="print emoji table for README.rst")

parser.add_argument("--show-commit-table",
                    dest="rst_table",
                    action="store_const",
                    const="commit",
                    help="print emoji table for git-commit")

parser.add_argument("--ed-commit-msg", default="")

args = parser.parse_args(args)

if args.ed_commit_msg:
    insert_after = "\n# Everything below will be removed.\n"
    table = "#\n" + get_commit_table()

    with open(args.ed_commit_msg, "r") as f:
        msg = f.read()

    if insert_after in msg:
        msg = msg.replace(insert_after,
                          "{}{}\n".format(insert_after, table),
                          1)

    elif msg.endswith("\n"):
        msg += "{}\n".format(table)

    else:
        msg += "\n{}".format(table)

    with open(args.ed_commit_msg, "w") as f:
        f.write(msg)

elif args.rst_table:
    print({"rst": get_rst_table(),
           "commit": get_commit_table(),
          }[args.rst_table])

else:
    filter_emoji(args, log_args)
