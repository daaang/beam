#!/usr/bin/env python3
# beam: Scripts for Me
# Copyright 2017 Matt LaChance
#
# This file is part of beam.
#
# beam is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# beam is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with beam. If not, see <http://www.gnu.org/licenses/>.
from argparse import ArgumentParser
from beam.emoji_lib import sub_emoji_term_io
from beam.emoji_lib.git import get_rst_table, get_commit_table
from os import chmod, stat as os_stat
from os.path import exists, isdir, join as path_join
from stat import S_IEXEC
from subprocess import Popen, PIPE
from sys import argv, stdin, stderr

def ignore_broken_pipe (func):
    def result (*args, **kwargs):
        try:
            func(*args, **kwargs)

        except BrokenPipeError:
            pass

        stderr.close()

    return result

@ignore_broken_pipe
def sub_emoji_in_each_line (stream):
    for line in stream:
        print(sub_emoji_term_io(line))

def run_git_log (args):
    return Popen(["git", "log", "--color=always"] + args,
                 stdout=PIPE,
                 universal_newlines=True)

def filter_emoji (args, args_to_pass):
    if args.input_file == "":
        stream = run_git_log(args_to_pass).stdout
        sub_emoji_in_each_line(stream)

    elif args.input_file == "-":
        sub_emoji_in_each_line(stdin)

    else:
        with open(args.input_file, "r") as stream:
            sub_emoji_in_each_line(stream)

def separate_arg_sets (sys_argv):
    args = list(sys_argv[1:])
    try:
        i = args.index("--")

    except ValueError:
        return args, [ ]

    else:
        return args[:i], args[i+1:]

def parse_args (args):
    parser = ArgumentParser(description="deal with emoji")

    parser.add_argument("input_file",
                        nargs="?",
                        default="",
                        help="defaults to stdout of git log")

    parser.add_argument("--show-rst-table",
                        dest="rst_table",
                        action="store_const",
                        const="rst",
                        default="",
                        help="print emoji table for README.rst")

    parser.add_argument("--show-commit-table",
                        dest="rst_table",
                        action="store_const",
                        const="commit",
                        help="print emoji table for git-commit")

    parser.add_argument("--ed-commit-msg",
                        default="",
                        help="append emoji table to existing commit "
                             "message")

    parser.add_argument("--add-hook",
                        action="store_true",
                        default=False,
                        help="add a git hook to append emoji tables "
                             "to all commit messages for this repo")

    return parser.parse_args(args)

def ed_commit_msg (args):
    insert_after = "\n# Everything below will be removed.\n"
    table = "#\n" + get_commit_table()

    with open(args.ed_commit_msg, "r") as f:
        msg = f.read()

    if insert_after in msg:
        msg = msg.replace(insert_after,
                          "{}{}\n".format(insert_after, table),
                          1)

    elif msg.endswith("\n"):
        msg += "{}\n".format(table)

    else:
        msg += "\n{}".format(table)

    with open(args.ed_commit_msg, "w") as f:
        f.write(msg)

def add_hook():
    proc = Popen(["git", "worktree", "list", "--porcelain"],
                 stdout=PIPE,
                 stderr=PIPE)
    output = proc.communicate()
    if proc.returncode != 0:
        print(output[1].decode().strip())
        raise SystemExit(proc.returncode)

    output = output[0].decode()
    assert output.startswith("worktree ")
    base = output[9:output.find("\n")].strip()

    hookdir = path_join(base, ".git", "hooks")
    assert isdir(hookdir)
    prep = path_join(hookdir, "prepare-commit-msg")

    if exists(prep):
        print("already exists: " + prep)

    else:
        with open(prep, "w") as f:
            f.write('#!/bin/sh\ngit emoji --ed-commit-msg "$1"\n')
        st = os_stat(prep)
        chmod(prep, st.st_mode | S_IEXEC)

our_args, args_to_pass = separate_arg_sets(argv)
args = parse_args(our_args)

if args.ed_commit_msg:
    ed_commit_msg(args)

elif args.add_hook:
    add_hook()

elif args.rst_table:
    print({"rst": get_rst_table(),
           "commit": get_commit_table(),
          }[args.rst_table])

else:
    filter_emoji(args, args_to_pass)
